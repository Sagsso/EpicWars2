<?xml version="1.0" encoding="UTF-8"?>
<trait xmlns="http://xml.phpdox.net/src" full="_generated\UnitTesterActions" namespace="_generated" name="UnitTesterActions" abstract="false" final="false" start="8" end="963">
  <file path="/opt/lampp/htdocs/backendProjects/Parcial2/tests/_support/_generated" file="UnitTesterActions.php" realpath="/opt/lampp/htdocs/backendProjects/Parcial2/tests/_support/_generated/UnitTesterActions.php" size="32440" time="2020-05-14T00:29:16+02:00" unixtime="1589408956" sha1="e12d1b9709691bfe537d99b0d34fb3ab18bb1833" relative="tests/_support/_generated/UnitTesterActions.php"/>
  <method name="getScenario" start="13" end="13" abstract="true" final="false" static="false" visibility="protected">
    <docblock>
      <description/>
      <return type="object">
        <type full="\Codeception\Scenario" namespace="\Codeception" name="Scenario"/>
      </return>
    </docblock>
  </method>
  <method name="expectException" start="46" end="48" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module.">Handles and checks exception called inside callback function.
Either exception class name or exception instance should be provided.

```php
&lt;?php
$I-&gt;expectException(MyException::class, function() {
    $this-&gt;doSomethingBad();
});

$I-&gt;expectException(new MyException(), function() {
    $this-&gt;doSomethingBad();
});
```
If you want to check message or exception code, you can pass them with exception instance:
```php
&lt;?php
// will check that exception MyException is thrown with "Don't do bad things" message
$I-&gt;expectException(new MyException("Don't do bad things"), function() {
    $this-&gt;doSomethingBad();
});
```</description>
      <deprecated value="Use expectThrowable() instead"/>
      <param description="or \Exception" variable="$exception" type="string"/>
      <param variable="$callback"/>
      <see value="\Codeception\Module\Asserts::expectException()"/>
    </docblock>
    <parameter name="exception" byreference="false" type="{unknown}"/>
    <parameter name="callback" byreference="false" type="{unknown}"/>
  </method>
  <method name="expectThrowable" start="80" end="82" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module.">Handles and checks throwables (Exceptions/Errors) called inside the callback function.
Either throwable class name or throwable instance should be provided.

```php
&lt;?php
$I-&gt;expectThrowable(MyThrowable::class, function() {
    $this-&gt;doSomethingBad();
});

$I-&gt;expectThrowable(new MyException(), function() {
    $this-&gt;doSomethingBad();
});
```
If you want to check message or throwable code, you can pass them with throwable instance:
```php
&lt;?php
// will check that throwable MyError is thrown with "Don't do bad things" message
$I-&gt;expectThrowable(new MyError("Don't do bad things"), function() {
    $this-&gt;doSomethingBad();
});
```</description>
      <param description="or \Throwable" variable="$throwable" type="string"/>
      <param variable="$callback"/>
      <see value="\Codeception\Module\Asserts::expectThrowable()"/>
    </docblock>
    <parameter name="throwable" byreference="false" type="{unknown}"/>
    <parameter name="callback" byreference="false" type="{unknown}"/>
  </method>
  <method name="assertEquals" start="96" end="98" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module.">Checks that two variables are equal.</description>
      <param variable="$expected"/>
      <param variable="$actual"/>
      <param type="string" variable="$message"/>
      <param type="float" variable="$delta"/>
      <see value="\Codeception\Module\Asserts::assertEquals()"/>
    </docblock>
    <parameter name="expected" byreference="false" type="{unknown}"/>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
    <parameter name="delta" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertNotEquals" start="112" end="114" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module.">Checks that two variables are not equal</description>
      <param variable="$expected"/>
      <param variable="$actual"/>
      <param type="string" variable="$message"/>
      <param type="float" variable="$delta"/>
      <see value="\Codeception\Module\Asserts::assertNotEquals()"/>
    </docblock>
    <parameter name="expected" byreference="false" type="{unknown}"/>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
    <parameter name="delta" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertSame" start="127" end="129" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module.">Checks that two variables are same</description>
      <param variable="$expected"/>
      <param variable="$actual"/>
      <param type="string" variable="$message"/>
      <see value="\Codeception\Module\Asserts::assertSame()"/>
    </docblock>
    <parameter name="expected" byreference="false" type="{unknown}"/>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertNotSame" start="142" end="144" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module.">Checks that two variables are not same</description>
      <param variable="$expected"/>
      <param variable="$actual"/>
      <param type="string" variable="$message"/>
      <see value="\Codeception\Module\Asserts::assertNotSame()"/>
    </docblock>
    <parameter name="expected" byreference="false" type="{unknown}"/>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertGreaterThan" start="157" end="159" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module.">Checks that actual is greater than expected</description>
      <param variable="$expected"/>
      <param variable="$actual"/>
      <param type="string" variable="$message"/>
      <see value="\Codeception\Module\Asserts::assertGreaterThan()"/>
    </docblock>
    <parameter name="expected" byreference="false" type="{unknown}"/>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertGreaterThanOrEqual" start="172" end="174" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module.">Checks that actual is greater or equal than expected</description>
      <param variable="$expected"/>
      <param variable="$actual"/>
      <param type="string" variable="$message"/>
      <see value="\Codeception\Module\Asserts::assertGreaterThanOrEqual()"/>
    </docblock>
    <parameter name="expected" byreference="false" type="{unknown}"/>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertLessThan" start="187" end="189" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module.">Checks that actual is less than expected</description>
      <param variable="$expected"/>
      <param variable="$actual"/>
      <param type="string" variable="$message"/>
      <see value="\Codeception\Module\Asserts::assertLessThan()"/>
    </docblock>
    <parameter name="expected" byreference="false" type="{unknown}"/>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertLessThanOrEqual" start="202" end="204" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module.">Checks that actual is less or equal than expected</description>
      <param variable="$expected"/>
      <param variable="$actual"/>
      <param type="string" variable="$message"/>
      <see value="\Codeception\Module\Asserts::assertLessThanOrEqual()"/>
    </docblock>
    <parameter name="expected" byreference="false" type="{unknown}"/>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertContains" start="217" end="219" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module.">Checks that haystack contains needle</description>
      <param variable="$needle"/>
      <param variable="$haystack"/>
      <param type="string" variable="$message"/>
      <see value="\Codeception\Module\Asserts::assertContains()"/>
    </docblock>
    <parameter name="needle" byreference="false" type="{unknown}"/>
    <parameter name="haystack" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertNotContains" start="232" end="234" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module.">Checks that haystack doesn't contain needle.</description>
      <param variable="$needle"/>
      <param variable="$haystack"/>
      <param type="string" variable="$message"/>
      <see value="\Codeception\Module\Asserts::assertNotContains()"/>
    </docblock>
    <parameter name="needle" byreference="false" type="{unknown}"/>
    <parameter name="haystack" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertRegExp" start="247" end="249" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module.">Checks that string match with pattern</description>
      <param type="string" variable="$pattern"/>
      <param type="string" variable="$string"/>
      <param type="string" variable="$message"/>
      <see value="\Codeception\Module\Asserts::assertRegExp()"/>
    </docblock>
    <parameter name="pattern" byreference="false" type="{unknown}"/>
    <parameter name="string" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertMatchesRegularExpression" start="263" end="265" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module.">Checks that string match with pattern

Alias of assertRegExp</description>
      <param type="string" variable="$pattern"/>
      <param type="string" variable="$string"/>
      <param type="string" variable="$message"/>
      <see value="\Codeception\Module\Asserts::assertMatchesRegularExpression()"/>
    </docblock>
    <parameter name="pattern" byreference="false" type="{unknown}"/>
    <parameter name="string" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertNotRegExp" start="278" end="280" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module.">Checks that string not match with pattern</description>
      <param type="string" variable="$pattern"/>
      <param type="string" variable="$string"/>
      <param type="string" variable="$message"/>
      <see value="\Codeception\Module\Asserts::assertNotRegExp()"/>
    </docblock>
    <parameter name="pattern" byreference="false" type="{unknown}"/>
    <parameter name="string" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertDoesNotMatchRegularExpression" start="294" end="296" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module.">Checks that string not match with pattern

Alias of assertNotRegExp</description>
      <param type="string" variable="$pattern"/>
      <param type="string" variable="$string"/>
      <param type="string" variable="$message"/>
      <see value="\Codeception\Module\Asserts::assertDoesNotMatchRegularExpression()"/>
    </docblock>
    <parameter name="pattern" byreference="false" type="{unknown}"/>
    <parameter name="string" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertStringStartsWith" start="309" end="311" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module.">Checks that a string starts with the given prefix.</description>
      <param type="string" variable="$prefix"/>
      <param type="string" variable="$string"/>
      <param type="string" variable="$message"/>
      <see value="\Codeception\Module\Asserts::assertStringStartsWith()"/>
    </docblock>
    <parameter name="prefix" byreference="false" type="{unknown}"/>
    <parameter name="string" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertStringStartsNotWith" start="324" end="326" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module.">Checks that a string doesn't start with the given prefix.</description>
      <param type="string" variable="$prefix"/>
      <param type="string" variable="$string"/>
      <param type="string" variable="$message"/>
      <see value="\Codeception\Module\Asserts::assertStringStartsNotWith()"/>
    </docblock>
    <parameter name="prefix" byreference="false" type="{unknown}"/>
    <parameter name="string" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertEmpty" start="338" end="340" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module.">Checks that variable is empty.</description>
      <param variable="$actual"/>
      <param type="string" variable="$message"/>
      <see value="\Codeception\Module\Asserts::assertEmpty()"/>
    </docblock>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertNotEmpty" start="352" end="354" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module.">Checks that variable is not empty.</description>
      <param variable="$actual"/>
      <param type="string" variable="$message"/>
      <see value="\Codeception\Module\Asserts::assertNotEmpty()"/>
    </docblock>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertNull" start="366" end="368" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module.">Checks that variable is NULL</description>
      <param variable="$actual"/>
      <param type="string" variable="$message"/>
      <see value="\Codeception\Module\Asserts::assertNull()"/>
    </docblock>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertNotNull" start="380" end="382" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module.">Checks that variable is not NULL</description>
      <param variable="$actual"/>
      <param type="string" variable="$message"/>
      <see value="\Codeception\Module\Asserts::assertNotNull()"/>
    </docblock>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertTrue" start="394" end="396" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module.">Checks that condition is positive.</description>
      <param variable="$condition"/>
      <param type="string" variable="$message"/>
      <see value="\Codeception\Module\Asserts::assertTrue()"/>
    </docblock>
    <parameter name="condition" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertNotTrue" start="408" end="410" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module.">Checks that the condition is NOT true (everything but true)</description>
      <param variable="$condition"/>
      <param type="string" variable="$message"/>
      <see value="\Codeception\Module\Asserts::assertNotTrue()"/>
    </docblock>
    <parameter name="condition" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertFalse" start="422" end="424" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module.">Checks that condition is negative.</description>
      <param variable="$condition"/>
      <param type="string" variable="$message"/>
      <see value="\Codeception\Module\Asserts::assertFalse()"/>
    </docblock>
    <parameter name="condition" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertNotFalse" start="436" end="438" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module.">Checks that the condition is NOT false (everything but false)</description>
      <param variable="$condition"/>
      <param type="string" variable="$message"/>
      <see value="\Codeception\Module\Asserts::assertNotFalse()"/>
    </docblock>
    <parameter name="condition" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertFileExists" start="450" end="452" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module.">Checks if file exists</description>
      <param type="string" variable="$filename"/>
      <param type="string" variable="$message"/>
      <see value="\Codeception\Module\Asserts::assertFileExists()"/>
    </docblock>
    <parameter name="filename" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertFileNotExists" start="464" end="466" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module.">Checks if file doesn't exist</description>
      <param type="string" variable="$filename"/>
      <param type="string" variable="$message"/>
      <see value="\Codeception\Module\Asserts::assertFileNotExists()"/>
    </docblock>
    <parameter name="filename" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertFileDoesNotExist" start="479" end="481" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module.">Checks if file doesn't exist

Alias of assertFileNotExists</description>
      <param type="string" variable="$filename"/>
      <param type="string" variable="$message"/>
      <see value="\Codeception\Module\Asserts::assertFileDoesNotExist()"/>
    </docblock>
    <parameter name="filename" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertGreaterOrEquals" start="492" end="494" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module."/>
      <param variable="$expected"/>
      <param variable="$actual"/>
      <param variable="$description"/>
      <see value="\Codeception\Module\Asserts::assertGreaterOrEquals()"/>
    </docblock>
    <parameter name="expected" byreference="false" type="{unknown}"/>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="description" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertLessOrEquals" start="505" end="507" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module."/>
      <param variable="$expected"/>
      <param variable="$actual"/>
      <param variable="$description"/>
      <see value="\Codeception\Module\Asserts::assertLessOrEquals()"/>
    </docblock>
    <parameter name="expected" byreference="false" type="{unknown}"/>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="description" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertIsEmpty" start="517" end="519" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module."/>
      <param variable="$actual"/>
      <param variable="$description"/>
      <see value="\Codeception\Module\Asserts::assertIsEmpty()"/>
    </docblock>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="description" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertArrayHasKey" start="530" end="532" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module."/>
      <param variable="$key"/>
      <param variable="$actual"/>
      <param variable="$description"/>
      <see value="\Codeception\Module\Asserts::assertArrayHasKey()"/>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="description" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertArrayNotHasKey" start="543" end="545" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module."/>
      <param variable="$key"/>
      <param variable="$actual"/>
      <param variable="$description"/>
      <see value="\Codeception\Module\Asserts::assertArrayNotHasKey()"/>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="description" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertCount" start="556" end="558" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module."/>
      <param variable="$expectedCount"/>
      <param variable="$actual"/>
      <param variable="$description"/>
      <see value="\Codeception\Module\Asserts::assertCount()"/>
    </docblock>
    <parameter name="expectedCount" byreference="false" type="{unknown}"/>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="description" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertInstanceOf" start="569" end="571" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module."/>
      <param variable="$class"/>
      <param variable="$actual"/>
      <param variable="$description"/>
      <see value="\Codeception\Module\Asserts::assertInstanceOf()"/>
    </docblock>
    <parameter name="class" byreference="false" type="{unknown}"/>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="description" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertNotInstanceOf" start="582" end="584" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module."/>
      <param variable="$class"/>
      <param variable="$actual"/>
      <param variable="$description"/>
      <see value="\Codeception\Module\Asserts::assertNotInstanceOf()"/>
    </docblock>
    <parameter name="class" byreference="false" type="{unknown}"/>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="description" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertInternalType" start="595" end="597" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module."/>
      <param variable="$type"/>
      <param variable="$actual"/>
      <param variable="$description"/>
      <see value="\Codeception\Module\Asserts::assertInternalType()"/>
    </docblock>
    <parameter name="type" byreference="false" type="{unknown}"/>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="description" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="fail" start="608" end="610" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module.">Fails the test with message.</description>
      <param variable="$message"/>
      <see value="\Codeception\Module\Asserts::fail()"/>
    </docblock>
    <parameter name="message" byreference="false" type="{unknown}"/>
  </method>
  <method name="assertStringContainsString" start="619" end="621" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module."/>
      <see value="\Codeception\Module\Asserts::assertStringContainsString()"/>
    </docblock>
    <parameter name="needle" byreference="false" type="{unknown}"/>
    <parameter name="haystack" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertStringNotContainsString" start="630" end="632" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module."/>
      <see value="\Codeception\Module\Asserts::assertStringNotContainsString()"/>
    </docblock>
    <parameter name="needle" byreference="false" type="{unknown}"/>
    <parameter name="haystack" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertStringContainsStringIgnoringCase" start="641" end="643" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module."/>
      <see value="\Codeception\Module\Asserts::assertStringContainsStringIgnoringCase()"/>
    </docblock>
    <parameter name="needle" byreference="false" type="{unknown}"/>
    <parameter name="haystack" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertStringNotContainsStringIgnoringCase" start="652" end="654" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module."/>
      <see value="\Codeception\Module\Asserts::assertStringNotContainsStringIgnoringCase()"/>
    </docblock>
    <parameter name="needle" byreference="false" type="{unknown}"/>
    <parameter name="haystack" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertStringEndsWith" start="663" end="665" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module."/>
      <since value="1.1.0 of module-asserts"/>
      <see value="\Codeception\Module\Asserts::assertStringEndsWith()"/>
    </docblock>
    <parameter name="suffix" byreference="false" type="{unknown}"/>
    <parameter name="string" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertStringEndsNotWith" start="674" end="676" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module."/>
      <since value="1.1.0 of module-asserts"/>
      <see value="\Codeception\Module\Asserts::assertStringEndsNotWith()"/>
    </docblock>
    <parameter name="suffix" byreference="false" type="{unknown}"/>
    <parameter name="string" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertIsArray" start="685" end="687" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module."/>
      <see value="\Codeception\Module\Asserts::assertIsArray()"/>
    </docblock>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertIsBool" start="696" end="698" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module."/>
      <see value="\Codeception\Module\Asserts::assertIsBool()"/>
    </docblock>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertIsFloat" start="707" end="709" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module."/>
      <see value="\Codeception\Module\Asserts::assertIsFloat()"/>
    </docblock>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertIsInt" start="718" end="720" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module."/>
      <see value="\Codeception\Module\Asserts::assertIsInt()"/>
    </docblock>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertIsNumeric" start="729" end="731" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module."/>
      <see value="\Codeception\Module\Asserts::assertIsNumeric()"/>
    </docblock>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertIsObject" start="740" end="742" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module."/>
      <see value="\Codeception\Module\Asserts::assertIsObject()"/>
    </docblock>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertIsResource" start="751" end="753" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module."/>
      <see value="\Codeception\Module\Asserts::assertIsResource()"/>
    </docblock>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertIsString" start="762" end="764" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module."/>
      <see value="\Codeception\Module\Asserts::assertIsString()"/>
    </docblock>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertIsScalar" start="773" end="775" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module."/>
      <see value="\Codeception\Module\Asserts::assertIsScalar()"/>
    </docblock>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertIsCallable" start="784" end="786" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module."/>
      <see value="\Codeception\Module\Asserts::assertIsCallable()"/>
    </docblock>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertIsNotArray" start="795" end="797" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module."/>
      <see value="\Codeception\Module\Asserts::assertIsNotArray()"/>
    </docblock>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertIsNotBool" start="806" end="808" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module."/>
      <see value="\Codeception\Module\Asserts::assertIsNotBool()"/>
    </docblock>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertIsNotFloat" start="817" end="819" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module."/>
      <see value="\Codeception\Module\Asserts::assertIsNotFloat()"/>
    </docblock>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertIsNotInt" start="828" end="830" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module."/>
      <see value="\Codeception\Module\Asserts::assertIsNotInt()"/>
    </docblock>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertIsNotNumeric" start="839" end="841" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module."/>
      <see value="\Codeception\Module\Asserts::assertIsNotNumeric()"/>
    </docblock>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertIsNotObject" start="850" end="852" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module."/>
      <see value="\Codeception\Module\Asserts::assertIsNotObject()"/>
    </docblock>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertIsNotResource" start="861" end="863" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module."/>
      <see value="\Codeception\Module\Asserts::assertIsNotResource()"/>
    </docblock>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertIsNotString" start="872" end="874" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module."/>
      <see value="\Codeception\Module\Asserts::assertIsNotString()"/>
    </docblock>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertIsNotScalar" start="883" end="885" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module."/>
      <see value="\Codeception\Module\Asserts::assertIsNotScalar()"/>
    </docblock>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertIsNotCallable" start="894" end="896" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module."/>
      <see value="\Codeception\Module\Asserts::assertIsNotCallable()"/>
    </docblock>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertEqualsCanonicalizing" start="905" end="907" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module."/>
      <see value="\Codeception\Module\Asserts::assertEqualsCanonicalizing()"/>
    </docblock>
    <parameter name="expected" byreference="false" type="{unknown}"/>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertNotEqualsCanonicalizing" start="916" end="918" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module."/>
      <see value="\Codeception\Module\Asserts::assertNotEqualsCanonicalizing()"/>
    </docblock>
    <parameter name="expected" byreference="false" type="{unknown}"/>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertEqualsIgnoringCase" start="927" end="929" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module."/>
      <see value="\Codeception\Module\Asserts::assertEqualsIgnoringCase()"/>
    </docblock>
    <parameter name="expected" byreference="false" type="{unknown}"/>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertNotEqualsIgnoringCase" start="938" end="940" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module."/>
      <see value="\Codeception\Module\Asserts::assertNotEqualsIgnoringCase()"/>
    </docblock>
    <parameter name="expected" byreference="false" type="{unknown}"/>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertEqualsWithDelta" start="949" end="951" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module."/>
      <see value="\Codeception\Module\Asserts::assertEqualsWithDelta()"/>
    </docblock>
    <parameter name="expected" byreference="false" type="{unknown}"/>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="delta" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <method name="assertNotEqualsWithDelta" start="960" end="962" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="[!] Method is generated. Documentation taken from corresponding module."/>
      <see value="\Codeception\Module\Asserts::assertNotEqualsWithDelta()"/>
    </docblock>
    <parameter name="expected" byreference="false" type="{unknown}"/>
    <parameter name="actual" byreference="false" type="{unknown}"/>
    <parameter name="delta" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="{unknown}" default="NULL"/>
  </method>
  <users>
    <class full="UnitTester" namespace="" name="UnitTester"/>
  </users>
</trait>
